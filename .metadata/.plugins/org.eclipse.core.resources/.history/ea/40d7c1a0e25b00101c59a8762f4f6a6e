package com.java.jsf.provider.controller;

import java.lang.reflect.Field;
import java.sql.SQLException;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import com.java.ejb.provider.bean.ProviderEjbImpl;
import com.java.ejb.provider.model.Doctor;
import com.java.ejb.provider.model.MedicalProcedure;
import com.java.ejb.provider.model.MedicineType;
import com.java.ejb.provider.model.PrescribedMedicines;
import com.java.ejb.provider.model.Prescription;
import com.java.ejb.provider.model.ProcedureStatus;
import com.java.ejb.provider.model.ProcedureTest;
import com.java.ejb.provider.model.ProcedureType;
import com.java.ejb.provider.model.Provider;
import com.java.ejb.recipient.model.Recipient;
import com.java.jsf.provider.daoImpl.ProviderDaoImpl;
import com.java.jsf.util.ProcedureIdGenerator;
import com.java.ejb.provider.model.Appointment;

public class ProcedureController {
    private ProviderEjbImpl providerEjb;
    private ProviderDaoImpl providerDao;
    MedicalProcedure procedure;
    Prescription prescription;
    PrescribedMedicines prescribedMedicines;
    ProcedureTest procedureTest;
    private String procedureType; // "single" or "scheduled"

    public String getProcedureType() {
        return procedureType;
    }

    public void setProcedureType(String procedureType) {
        this.procedureType = procedureType;
    }

    public ProcedureController() {
        super();
    }

    public ProviderEjbImpl getProviderEjb() {
        return providerEjb;
    }

    public void setProviderEjb(ProviderEjbImpl providerEjb) {
        this.providerEjb = providerEjb;
    }

    public ProviderDaoImpl getProviderDao() {
        return providerDao;
    }

    public void setProviderDao(ProviderDaoImpl providerDao) {
        this.providerDao = providerDao;
    }

    public String addSingleDayMedicalProcedureController(MedicalProcedure medicalProcedure) throws ClassNotFoundException, SQLException {
        providerDao = new ProviderDaoImpl();
        FacesContext context = FacesContext.getCurrentInstance();
        boolean isValid = true;

        // Validate Recipient Existence
        Recipient recipient = providerDao.searchRecipientByHealthId(medicalProcedure.getRecipient().gethId());
        if (recipient == null) {
            context.addMessage("recipientId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Patient", "Recipient with given Health ID not found."));
            context.validationFailed();
            isValid = false;
        }

        // Validate Provider Existence
        Provider provider = providerDao.searchProviderById(medicalProcedure.getProvider().getProviderId());
        if (provider == null) {
            context.addMessage("providerId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Provider", "Provider with given ID not found."));
            context.validationFailed();
            isValid = false;
        }

        // Validate Doctor Existence
        Doctor doctor = providerDao.searchDoctorById(medicalProcedure.getDoctor().getDoctorId());
        if (doctor == null) {
            context.addMessage("doctorId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Doctor", "Doctor with given ID not found."));
            context.validationFailed();
            isValid = false;
        }

        // Validate Appointment Existence and Association
        Appointment appointment = providerDao.searchAppointmentById(medicalProcedure.getAppointment().getAppointmentId());
        if (appointment == null) {
            context.addMessage("appointmentId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Appointment", "Appointment with given ID not found."));
            context.validationFailed();
            isValid = false;
        } else {
            if (!appointment.getProvider().getProviderId().equals(medicalProcedure.getProvider().getProviderId())) {
                context.addMessage("providerId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Mismatch", "This appointment does not belong to the selected provider."));
                context.validationFailed();
                isValid = false;
            }

            if (!appointment.getDoctor().getDoctorId().equals(medicalProcedure.getDoctor().getDoctorId())) {
                context.addMessage("doctorId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Mismatch", "This appointment does not involve the selected doctor."));
                context.validationFailed();
                isValid = false;
            }

            if (!appointment.getRecipient().gethId().equals(medicalProcedure.getRecipient().gethId())) {
                context.addMessage("recipientId", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Mismatch", "This appointment is not for the selected patient."));
                context.validationFailed();
                isValid = false;
            }
        }

        // Procedure Date Validation
        Date procedureDate = medicalProcedure.getProcedureDate();
        Date today = new Date();
        if (procedureDate == null) {
            context.addMessage("procedureDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Missing Date", "Procedure Date is required."));
            context.validationFailed();
            isValid = false;
        } else if (procedureDate.after(today)) {
            context.addMessage("procedureDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Date", "Procedure Date cannot be in the future."));
            context.validationFailed();
            isValid = false;
        }

        if (!isValid) {
            return null;
        }

        // Set single-day specific properties
        medicalProcedure.setFromDate(null);
        medicalProcedure.setToDate(null);
        medicalProcedure.setScheduledDate(null);
        medicalProcedure.setType(ProcedureType.SINGLE_DAY);
        medicalProcedure.setProcedureStatus(ProcedureStatus.COMPLETED);
        // Persist using EJB
        String res = providerEjb.addMedicalProcedure(medicalProcedure);
        this.procedure = null;
        return res;
    }

    public String addTestController(ProcedureTest procedureTest) throws ClassNotFoundException, SQLException {
        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
        providerDao = new ProviderDaoImpl();

        String prescriptionId = (String) sessionMap.get("prescriptionId");
        procedureTest.getPrescription().setPrescriptionId(prescriptionId);

        // Fetch prescription writtenOn and procedure endDate
        Date writtenOn = providerDao.getPrescriptionWrittenOnDate(prescriptionId);
        String procedureId = (String) sessionMap.get("procedureId"); // assume stored in session
        Date procedureEndDate = providerDao.getProcedureEndDate(procedureId);

        // 1. Validate Test Name
        String testName = procedureTest.getTestName();
        if (testName == null || testName.trim().length() < 2 || !testName.matches("^[a-zA-Z0-9 ()/\\-.]+$")) {
            context.addMessage("testName", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Test name must be at least 2 characters and contain only letters, numbers, spaces, (), /, -, and .", null));
            return null;
        }
        testName = testName.trim().replaceAll("\\s+", " ");
        procedureTest.setTestName(testName);

     // 2. Validate Test Date
        Date testDate = procedureTest.getTestDate();
        if (testDate == null) {
            context.addMessage("testDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Test date is required.", null));
            return null;
        }

        // Get prescription start and end dates
        List<Date> prescriptionDates = providerDao.getPrescriptionDates(prescriptionId);
        if (prescriptionDates == null || prescriptionDates.size() != 2 ||
            prescriptionDates.get(0) == null || prescriptionDates.get(1) == null) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Could not retrieve valid prescription dates for test date validation.", null));
            return null;
        }

        Date prescriptionStart = prescriptionDates.get(0);
        Date prescriptionEnd = prescriptionDates.get(1);

        if (testDate.before(prescriptionStart)) {
            context.addMessage("testDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Test date (" + testDate + ") cannot be before prescription start date (" + prescriptionStart + ").", null));
            return null;
        }

        if (testDate.after(prescriptionEnd)) {
            context.addMessage("testDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Test date (" + testDate + ") cannot be after prescription end date (" + prescriptionEnd + ").", null));
            return null;
        }


        // 3. Validate Result Summary
        String result = procedureTest.getResultSummary();
        if (result == null || result.trim().isEmpty()) {
            context.addMessage("resultSummary", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Result summary is required.", null));
            return null;
        }

        return providerEjb.addTest(procedureTest);
    }


    public String addPresribedMedicinesController(PrescribedMedicines prescribedMedicines)
            throws ClassNotFoundException, SQLException {

        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
        providerDao = new ProviderDaoImpl();

        String prescriptionId = (String) sessionMap.get("prescriptionId");
        prescribedMedicines.getPrescription().setPrescriptionId(prescriptionId);

        // 1. Medicine Name Validation
        String medicineName = prescribedMedicines.getMedicineName();
        if (medicineName == null || !medicineName.matches("^[a-zA-Z0-9()\\-+/'. ]{2,50}$")) {
            context.addMessage("medicineName", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Medicine name must be 2–50 characters and can include letters, digits, -, /, +, (), '.', and spaces.", null));
            return null;
        }

        // Normalize medicine name
        medicineName = medicineName.trim().replaceAll("\\s+", " ");
        prescribedMedicines.setMedicineName(medicineName);

        // 2. Check for duplicate medicine in same prescription
        List<String> existingMedicineNames = providerDao.getMedicineNamesByPrescriptionId(prescriptionId);
        for (String existingName : existingMedicineNames) {
            if (existingName.equalsIgnoreCase(medicineName)) {
                context.addMessage("medicineName", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "This medicine is already prescribed in this prescription.", null));
                return null;
            }
        }

        // 3. Dosage Validation
        String dosage = prescribedMedicines.getDosage();
        if (dosage == null || dosage.trim().isEmpty()) {
            context.addMessage("dosage", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Dosage is required.", null));
            return null;
        }

        MedicineType type = prescribedMedicines.getType();
        String pattern;

        switch (type) {
            case TABLET:
                pattern = "^\\d+\\s*tablet(s)?$";
                break;
            case SYRUP:
                pattern = "^\\d+(\\.\\d+)?\\s*ml$";
                break;
            case INJECTION:
                pattern = "^(\\d+(\\.\\d+)?\\s*ml|\\d+\\s*dose(s)?)$";
                break;
            case DROP:
                pattern = "^\\d+\\s*drop(s)?$";
                break;
            default:
                context.addMessage("type", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Invalid or missing medicine type.", null));
                return null;
        }

        if (!dosage.trim().toLowerCase().matches(pattern)) {
            context.addMessage("dosage", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Dosage format is invalid for type: " + type, null));
            return null;
        }

        // 4. Fetch Prescription Dates
        List<Date> prescriptionDates = providerDao.getPrescriptionDates(prescriptionId);
        if (prescriptionDates == null || prescriptionDates.size() != 2 ||
            prescriptionDates.get(0) == null || prescriptionDates.get(1) == null) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Could not retrieve valid prescription dates for validation.", null));
            return null;
        }

        Date prescriptionStart = prescriptionDates.get(0);
        Date prescriptionEnd = prescriptionDates.get(1);
        Date medStart = prescribedMedicines.getStartDate();
        Date medEnd = prescribedMedicines.getEndDate();

     // 5. Validate Medicine Date Range
        if (medStart == null) {
            context.addMessage("startDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Enter from which date to start taking medicine", null));
            return null;
        }

        if (medEnd == null) {
            context.addMessage("endDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Enter till which date to take the medicines", null));
            return null;
        }

        if (medEnd.before(medStart)) {
            context.addMessage("endDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "End date (" + medEnd + ") cannot be before start date (" + medStart + ").", null));
            return null;
        }

        if (medStart.before(prescriptionStart)) {
            context.addMessage("startDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Start date (" + medStart + ") cannot be before prescription start date (" + prescriptionStart + ").", null));
            return null;
        }

        if (medStart.after(prescriptionEnd)) {
            context.addMessage("startDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Start date (" + medStart + ") cannot be after prescription end date (" + prescriptionEnd + ").", null));
            return null;
        }

        if (medEnd.before(prescriptionStart)) {
            context.addMessage("endDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "End date (" + medEnd + ") cannot be before prescription start date (" + prescriptionStart + ").", null));
            return null;
        }

        if (medEnd.after(prescriptionEnd)) {
            context.addMessage("endDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "End date (" + medEnd + ") cannot be after prescription end date (" + prescriptionEnd + ").", null));
            return null;
        }
        // 6. Duration Validation
        long dayDiff = (medEnd.getTime() - medStart.getTime()) / (1000 * 60 * 60 * 24) + 1;

        try {
            int durationDays = Integer.parseInt(prescribedMedicines.getDuration().trim());

            if (durationDays != dayDiff) {
                context.addMessage("duration", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Duration (" + durationDays + " days) does not match actual period (" + dayDiff + " days).", null));
                return null;
            }
        } catch (NumberFormatException e) {
            context.addMessage("duration", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Duration must be a valid integer number.", null));
            return null;
        }

        // ✅ All validations passed
        return providerEjb.addPrescribedMedicines(prescribedMedicines);
    }
    public String addPrescriptionController(Prescription prescription) throws ClassNotFoundException, SQLException {
        providerDao = new ProviderDaoImpl();
        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
        boolean isValid = true;

        // Set references from session
        String procedureId = (String) sessionMap.get("procedureId");
        String providerId = (String) sessionMap.get("providerId");
        String doctorId = (String) sessionMap.get("doctorId");
        String recipientHid = (String) sessionMap.get("recipientHid");

        MedicalProcedure procedure = new MedicalProcedure();
        procedure.setProcedureId(procedureId);
        prescription.setProcedure(procedure);

        Provider provider = new Provider();
        provider.setProviderId(providerId);
        prescription.setProvider(provider);

        Doctor doctor = new Doctor();
        doctor.setDoctorId(doctorId);
        prescription.setDoctor(doctor);

        Recipient recipient = new Recipient();
        recipient.sethId(recipientHid);
        prescription.setRecipient(recipient);

        // Validate writtenOn
        if (prescription.getWrittenOn() == null) {
            context.addMessage("writtenOn", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Please enter the Written On date.", null));
            context.validationFailed();
            return null;
        }

        // Fetch complete MedicalProcedure
        MedicalProcedure fullProcedure = providerDao.getProcedureById(procedureId);
        if (fullProcedure == null) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Invalid Procedure ID", "Medical Procedure not found."));
            context.validationFailed();
            return null;
        }

        if (fullProcedure.getProcedureStatus() != ProcedureStatus.COMPLETED) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Prescriptions can only be added for COMPLETED procedures.", null));
            context.validationFailed();
            return null;
        }

        Date procedureDate = fullProcedure.getProcedureDate();
        boolean isSingleDay = fullProcedure.getType() == ProcedureType.SINGLE_DAY;

        // === Validation & Auto-Fill ===
        if (prescription.getWrittenOn().before(procedureDate)) {
            context.addMessage("writtenOn", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Written On date cannot be before Procedure Date (" + procedureDate + ").", null));
            context.validationFailed();
            return null;
        }

        if (isSingleDay) {
            // If dates are not already populated from createNewPrescription(), set them
            if (prescription.getStartDate() == null) {
                prescription.setStartDate(procedureDate);
            }
            if (prescription.getEndDate() == null) {
                prescription.setEndDate(procedureDate);
            }
        } else {
            // Long-term procedure: validate both start and end dates
            if (prescription.getStartDate() == null) {
                context.addMessage("startDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Please enter the prescription Start Date.", null));
                context.validationFailed();
                isValid = false;
            }
            if (prescription.getEndDate() == null) {
                context.addMessage("endDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                        "Please enter the prescription End Date.", null));
                context.validationFailed();
                isValid = false;
            }
        }

        // General validations
        if (prescription.getStartDate() != null &&
            prescription.getStartDate().before(prescription.getWrittenOn())) {
            context.addMessage("startDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Start Date cannot be before Written On Date.", null));
            context.validationFailed();
            isValid = false;
        }

        if (prescription.getStartDate() != null && prescription.getEndDate() != null &&
            prescription.getEndDate().before(prescription.getStartDate())) {
            context.addMessage("endDate", new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "End Date cannot be before Start Date.", null));
            context.validationFailed();
            isValid = false;
        }

        if (!isValid) {
            return null;
        }

        // Save and return outcome
        return providerEjb.addPrescription(prescription);
    }


    public String createNewProcedure() throws ClassNotFoundException, SQLException {
        procedure = new MedicalProcedure();
        procedure.setProcedureId(providerEjb.generateNewProcedureId());

        System.out.println("______________________________________new procedure created with values " + procedure);

        if ("single".equalsIgnoreCase(procedureType)) {
        	this.procedureType=null;
            return "AddMedicalProcedure?faces-redirect=true";
        } else if ("scheduled".equalsIgnoreCase(procedureType)) {
        	this.procedureType=null;
            return "AddScheduledMedicalProcedure?faces-redirect=true";
        } 
            return "AddMedicalProcedure?faces-redirect=true";
        }

    public String createNewPrescription() throws ClassNotFoundException, SQLException {
        prescription = new Prescription();
        prescription.setPrescriptionId(providerEjb.generateNewPrescriptionId());

        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
        MedicalProcedure procedure=new MedicalProcedure();
        procedure.setType((ProcedureType) sessionMap.get("procedureType"));
        if (procedure != null && procedure.getType() == ProcedureType.SINGLE_DAY) {
            Date procedureDate = (Date)sessionMap.get("procedureDate");
            
            prescription.setWrittenOn(procedureDate);
            prescription.setStartDate(procedureDate);
            prescription.setEndDate(procedureDate);
            System.out.println(prescription.getWrittenOn());
            System.out.println(prescription.getStartDate());
            System.out.println(prescription.getEndDate());
        }

        return "AddPrescription?faces-redirect=true";
    }

    public String createNewPrescribedMedicine() throws ClassNotFoundException, SQLException {
        prescribedMedicines = new PrescribedMedicines();
        prescribedMedicines.setPrescribedId(providerEjb.generateNewPrescribedMedicineId());

        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
       
        MedicalProcedure procedure=new MedicalProcedure();
        procedure.setType((ProcedureType) sessionMap.get("procedureType"));
            if (procedure.getType() == ProcedureType.SINGLE_DAY) {
            	  Date procedureDate = (Date)sessionMap.get("procedureDate");
                prescribedMedicines.setStartDate(procedureDate);
                prescribedMedicines.setEndDate(procedureDate);
            }
            // For LONG_TERM, JSF form should collect dates
        return "AddPrescribedMedicine?faces-redirect=true";
    }

    public String createNewProcedureTest() throws ClassNotFoundException, SQLException {
        procedureTest = new ProcedureTest();
        procedureTest.setTestId(providerEjb.generateNewProcedureTestId());

        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, Object> sessionMap = context.getExternalContext().getSessionMap();
        MedicalProcedure procedure=new MedicalProcedure();
        procedure.setType((ProcedureType) sessionMap.get("procedureType"));

        if (procedure != null && procedure.getProcedureStatus() == ProcedureStatus.COMPLETED) {
            if (procedure.getType() == ProcedureType.SINGLE_DAY) {
            	  Date procedureDate = (Date)sessionMap.get("procedureDate");
               procedureTest.setTestDate(procedureDate);
            }
            // For LONG_TERM, user will provide dates in the form
        }

        return "AddTest?faces-redirect=true";
    }

    public MedicalProcedure getProcedure() {
        return procedure;
    }


	public void setProcedure(MedicalProcedure procedure) {
		this.procedure = procedure;
	}

	public Prescription getPrescription() {
		return prescription;
	}

	public void setPrescription(Prescription prescription) {
		this.prescription = prescription;
	}

	public PrescribedMedicines getPrescribedMedicines() {
		return prescribedMedicines;
	}

	public void setPrescribedMedicines(PrescribedMedicines prescribedMedicines) {
		this.prescribedMedicines = prescribedMedicines;
	}

	public ProcedureTest getProcedureTest() {
		return procedureTest;
	}

	public void setProcedureTest(ProcedureTest procedureTest) {
		this.procedureTest = procedureTest;
	}

    public String procedureSubmit() {
        return "ProviderDashboard?faces-redirect=true";
    }

    public String prescriptionDetailsSubmit() {
        return "ProcedureDashboard?faces-redirect=true";
    }
}